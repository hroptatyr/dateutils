dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
m4_define([GIT_VERSION_GEN], [dnl
pushdef([version], [m4_esyscmd([./git-version-gen])])[]dnl
ifelse([]version[], [], [0.2.4], []version[])[]dnl
popdef([version])[]dnl
])
AC_INIT([dateutils], [GIT_VERSION_GEN], [https://github.com/hroptatyr/dateutils])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([src/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([src/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for uschi and friends.
#### Copyright (C) 2011-2012 Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz color-tests parallel-tests])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## the build chain
AC_PROG_CC([icc gcc tcc cc])
SXE_CHECK_CC([gnu11 c11 gnu1x c1x gnu99 c99])
AC_C_BIGENDIAN
SXE_CHECK_CFLAGS

## check for byteorder utils
AC_CHECK_HEADERS([endian.h sys/endian.h machine/endian.h byteorder.h])
AC_CHECK_HEADERS([byteswap.h])

AC_CHECK_HEADERS([alloca.h])

## disallow warnings from here
SXE_LANG_WERROR([off])

## check for mmap and friends
AC_CHECK_HEADERS([sys/mman.h])
AC_MSG_CHECKING([for ANON maps])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#define _POSIX_C_SOURCE 200112
#define _BSD_SOURCE
#if defined HAVE_SYS_MMAN_H
# include <sys/mman.h>
#endif  /* HAVE_SYS_MMAN_H */
#if defined MAP_ANON
/* good */
#elif defined MAP_ANONYMOUS
/* good too */
#else
# error MAP_ANON | MAP_ANONYMOUS needed
#endif
]])], [sxe_cv_feat_anon_maps="yes"], [sxe_cv_feat_anon_maps="no"])
if test "${sxe_cv_feat_anon_maps}" = "no"; then
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#define _POSIX_C_SOURCE 200112
#define _BSD_SOURCE
#define _DARWIN_C_SOURCE
#if defined HAVE_SYS_MMAN_H
# include <sys/mman.h>
#endif  /* HAVE_SYS_MMAN_H */
#if defined MAP_ANON
/* good */
#elif defined MAP_ANONYMOUS
/* good too */
#else
# error MAP_ANON | MAP_ANONYMOUS needed
#endif
]])], [
	sxe_cv_feat_anon_maps="yes"
	AC_DEFINE([MAP_ANON_NEEDS_DARWIN_SOURCE], [1], [how to get MAP_ANON])
	], [
	sxe_cv_feat_anon_maps="no"
	])
fi
AC_MSG_RESULT([${sxe_cv_feat_anon_maps}])


## check for tzfile.h
AX_ZONEINFO([right])

## check for strptime
AC_CHECK_FUNCS([strptime])
have_strptime="${ac_cv_func_strptime}"
AM_CONDITIONAL([HAVE_STRPTIME], [test "${have_strptime}" = "yes"])

## check for working c1x features
SXE_CHECK_ANON_STRUCTS_DECL
SXE_CHECK_ANON_STRUCTS_INIT
SXE_CHECK_SLOPPY_STRUCTS_INIT

if test "${sxe_cv_have_anon_structs_decl}" != "yes"; then
	AC_MSG_ERROR([C compiler unusable

dateutils make extensive use of c11 anonymous structs/unions but your
compiler does not fully support them.
Change either the CFLAGS or the compiler.
Good day.
])
fi


AM_MISSING_PROG([HELP2MAN], [help2man], ["${missing_dir}"])

AM_PROG_LEX
AC_PROG_YACC

AC_PATH_PROG([GPERF], [gperf])
if test -z "${GPERF}"; then
	GPERF="gperf"
fi
AC_ARG_VAR([GPERF], [full path to the gperf tool])


AC_PATH_PROG([GDATE], [date])
AC_ARG_VAR([GDATE], [full path to the date tool])
if test -n "${GDATE}"; then
	## try and use -d
	AC_MSG_CHECKING([if date is of GNU flavour])
	if "${GDATE}" -d "2012-01-01" >/dev/null 2>/dev/null; then
		have_gdate="yes"
	else
		have_gdate="no"
	fi
	AC_MSG_RESULT([${have_gdate}])
fi
if test -n "${GDATE}" -a "${have_gdate}" = "yes"; then
	## try and use -d with a big year
	AC_MSG_CHECKING([if date is immune to year 2038 problem])
	if "${GDATE}" -d "4095-01-01" >/dev/null 2>/dev/null; then
		have_gdate_2039="yes"
	else
		have_gdate_2039="no"
	fi
	AC_MSG_RESULT([${have_gdate_2039}])
fi
AC_ARG_VAR([have_gdate], [yes if GDATE is of GNU flavour])
AC_ARG_VAR([have_gdate_2039], [yes if GDATE can handle years beyond 2038])
AM_CONDITIONAL([HAVE_GDATE], [test "${have_gdate}" = "yes"])
AM_CONDITIONAL([HAVE_GDATE_2039], [test "${have_gdate_2039}" = "yes"])


AC_ARG_ENABLE([fast-arith],
	[AS_HELP_STRING([--enable-fast-arith], [
Whether to enable fast date handling and arithmetic routines at the cost
of strictness.  For instance the leap year rule used is incorrect for
years before 1901 and after 2100, or every month can have a 31st to
denote the last day of the month.])
AS_HELP_STRING([], [Default: disabled])],
	[enable_fast_arith="${enableval}"], [enable_fast_arith="no"])

AC_ARG_WITH([matlab], [
AS_HELP_STRING([--with-matlab], [Build matlab contribs, default: no.])],
        [dnl
		## disallow warnings from here
		SXE_LANG_WERROR([off])
                SXE_CHECK_MATLAB([${withval}])
                if test -n "${sxe_cv_matlabroot}"; then
                        with_matlab="yes"
                fi
        ], [with_matlab="no"])
AM_CONDITIONAL([BUILD_MATCLI], [test "${with_matlab}" = "yes"])

## checks
if test "${enable_fast_arith}" = "yes"; then
	AC_DEFINE([WITH_FAST_ARITH], [1],
		[whether to use fast but incorrect date routines])
fi

## always define this one for now
AC_DEFINE([WITH_LEAP_SECONDS], [1], [Whether to use leap-second aware routines])
AM_CONDITIONAL([WITH_LEAP_SECONDS], [test "1" = "1"])

## trivial conditional so that the dexpr scanner and parser are built
AM_CONDITIONAL([BUILD_DEXPR], [test "0" = "1"])

AM_CONDITIONAL([BUILD_LTRCC], [test ! -f "${srcdir}/lib/leapseconds.def"])

## trivial, no special stuff needed
dut_apps="dadd dconv ddiff dgrep dround dseq dtest"
if test "${have_strptime}" = "yes"; then
	misc_apps="strptime"
fi
if test "${with_matlab}" = "yes"; then
        misc_apps="${misc_apps}${misc_apps:+ }tzconv.m(atlab)"
fi

dnl must come after all AC_LINK_IFELSE clauses
## check for the ldflags
SXE_CHECK_LDFLAGS
SXE_CHECK_LIBTOOL

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([info/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([contrib/Makefile])
AC_CONFIG_FILES([libdut.pc])
AC_OUTPUT

cat <<EOF


Build summary
=============
Build date/time apps:	${dut_apps}
Build misc apps:	${misc_apps}

EOF

dnl configure.ac ends here
